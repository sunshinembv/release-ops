name: Publish App to GitHub

on:
  workflow_dispatch:
    inputs:
      target_owner:
        description: 'Владелец нового репо'
        required: true
        default: 'sunshinembv'
      repo_name:
        description: 'Имя нового репозитория'
        required: true
        default: 'hello-ai-advent'
      description:
        description: 'Описание'
        required: false
        default: 'Hello AI Advent (Android)'
      private:
        description: 'true/false приватный?'
        required: true
        default: 'false'
      template_owner:
        description: 'owner шаблона'
        required: true
        default: 'sunshinembv'
      template_repo:
        description: 'имя шаблона'
        required: true
        default: 'HelloAIAdventTemplate'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      repo_fullname: ${{ steps.vars.outputs.REPO_FULLNAME }}
      repo_html_url: ${{ steps.create.outputs.REPO_HTML_URL }}
      repo_clone_url: ${{ steps.create.outputs.REPO_CLONE_URL }}
    steps:
      - name: Prepare target fullname
        id: vars
        run: |
          echo "REPO_FULLNAME=${{ github.event.inputs.target_owner }}/${{ github.event.inputs.repo_name }}" >> "$GITHUB_OUTPUT"

      - name: Create from template
        id: create
        env:
          GH_REPO_PAT: ${{ secrets.GH_REPO_PAT }}
          TARGET_OWNER: ${{ github.event.inputs.target_owner }}
          REPO_NAME: ${{ github.event.inputs.repo_name }}
          DESCRIPTION: ${{ github.event.inputs.description }}
          PRIVATE: ${{ github.event.inputs.private }}
          TEMPLATE_OWNER: ${{ github.event.inputs.template_owner }}
          TEMPLATE_REPO: ${{ github.event.inputs.template_repo }}
        run: |
          set -euo pipefail

          if [ -z "${GH_REPO_PAT:-}" ]; then
            echo "❌ Secret GH_REPO_PAT не задан"; exit 1
          fi

          # case-insensitive true/false
          case "${PRIVATE,,}" in
            true|1|yes|y) PRIV=true ;;
            *)            PRIV=false ;;
          esac

          RESP=$(curl -sS -X POST \
            -H "Authorization: Bearer ${GH_REPO_PAT}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${TEMPLATE_OWNER}/${TEMPLATE_REPO}/generate" \
            -d "$(jq -n \
                  --arg owner "$TARGET_OWNER" \
                  --arg name "$REPO_NAME" \
                  --arg desc "$DESCRIPTION" \
                  --argjson priv $PRIV \
                  '{owner:$owner,name:$name,description:$desc,private:$priv}')" )

          echo "$RESP" | jq . > /tmp/create.json || true

          if jq -e '.html_url' /tmp/create.json >/dev/null 2>&1; then
            HTML_URL=$(jq -r .html_url  /tmp/create.json)
            CLONE_URL=$(jq -r .clone_url /tmp/create.json)
            echo "REPO_HTML_URL=${HTML_URL}"  >> "$GITHUB_OUTPUT"
            echo "REPO_CLONE_URL=${CLONE_URL}" >> "$GITHUB_OUTPUT"
            {
              echo "### Repository created"
              echo "- HTML: ${HTML_URL}"
              echo "- Clone: \`${CLONE_URL}\`"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Create failed:"; cat /tmp/create.json; exit 1
          fi

  bootstrap_secrets:
    name: Bootstrap secrets & variables
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Ensure gh CLI
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            type -p apt >/dev/null 2>&1 && sudo apt-get update && sudo apt-get install -y gh
          fi
          gh --version

      - name: Configure auth for gh
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
        run: gh auth status || true

      - name: Set secrets (Notion + Android signing + Play) IF PRESENT
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}

          # Notion
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}

          # Android signing (optional)
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

          # Play service account (optional)
          PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          set -euo pipefail

          set_secret_if_present () {
            local name="$1"
            local val="$2"
            if [ -n "$val" ]; then
              echo -n "$val" | gh secret set "$name" -R "$TARGET_REPO" -b-
              echo "✓ Secret $name set"
            else
              echo "… Secret $name is empty in release-ops — skipping"
            fi
          }

          set_secret_if_present NOTION_TOKEN "$NOTION_TOKEN"

          # Android signing (optional)
          set_secret_if_present KEYSTORE_BASE64 "$KEYSTORE_BASE64"
          set_secret_if_present KEYSTORE_PASSWORD "$KEYSTORE_PASSWORD"
          set_secret_if_present KEY_ALIAS "$KEY_ALIAS"
          set_secret_if_present KEY_PASSWORD "$KEY_PASSWORD"

          # Play (optional)
          set_secret_if_present PLAY_SERVICE_ACCOUNT_JSON "$PLAY_SERVICE_ACCOUNT_JSON"

      - name: Set variables (Notion DB id) IF PRESENT
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
          NOTION_DB_RELEASES: ${{ vars.NOTION_DB_RELEASES }}
        run: |
          set -euo pipefail
          if [ -n "${NOTION_DB_RELEASES:-}" ]; then
            gh variable set NOTION_DB_RELEASES -R "$TARGET_REPO" --body "$NOTION_DB_RELEASES"
            echo "✓ Variable NOTION_DB_RELEASES set"
          else
            echo "… Variable NOTION_DB_RELEASES is empty in release-ops — skipping"
          fi

      - name: Summary
        run: |
          {
            echo "### Bootstrapped secrets/variables for ${{ needs.publish.outputs.repo_fullname }}"
            echo "- Repo: ${{ needs.publish.outputs.repo_html_url }}"
            echo "- Notion: secret \`NOTION_TOKEN\` $( [ -n "${{ secrets.NOTION_TOKEN }}" ] && echo "✅" || echo "⛔" )"
            echo "- Notion DB: var \`NOTION_DB_RELEASES\` $( [ -n "${{ vars.NOTION_DB_RELEASES }}" ] && echo "✅" || echo "⛔" )"
            echo "- Android signing: KEYSTORE_* $( [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && echo "✅ (present)" || echo "⛔ (skipped)" )"
            echo "- Play JSON: $( [ -n "${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}" ] && echo "✅" || echo "⛔" )"
          } >> "$GITHUB_STEP_SUMMARY"
