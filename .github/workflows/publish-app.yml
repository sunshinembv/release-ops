name: Publish App (create from template + bootstrap)

on:
  workflow_dispatch:
    inputs:
      target_owner:
        description: 'Владелец нового репо'
        required: true
        default: 'sunshinembv'
      repo_name:
        description: 'Имя нового репозитория'
        required: true
        default: 'hello-ai-advent'
      description:
        description: 'Описание'
        required: false
        default: 'Hello AI Advent (Android)'
      private:
        description: 'true/false приватный?'
        required: true
        default: 'false'
      template_owner:
        description: 'owner шаблона'
        required: true
        default: 'sunshinembv'
      template_repo:
        description: 'имя шаблона'
        required: true
        default: 'HelloAIAdventTemplate'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      repo_fullname: ${{ steps.vars.outputs.REPO_FULLNAME }}
      repo_html_url: ${{ steps.create.outputs.REPO_HTML_URL }}
      repo_clone_url: ${{ steps.create.outputs.REPO_CLONE_URL }}
    steps:
      - name: Prepare target fullname
        id: vars
        run: |
          echo "REPO_FULLNAME=${{ github.event.inputs.target_owner }}/${{ github.event.inputs.repo_name }}" >> "$GITHUB_OUTPUT"

      - name: Create from template
        id: create
        env:
          GH_REPO_PAT: ${{ secrets.GH_REPO_PAT }}
          TARGET_OWNER: ${{ github.event.inputs.target_owner }}
          REPO_NAME: ${{ github.event.inputs.repo_name }}
          DESCRIPTION: ${{ github.event.inputs.description }}
          PRIVATE: ${{ github.event.inputs.private }}
          TEMPLATE_OWNER: ${{ github.event.inputs.template_owner }}
          TEMPLATE_REPO: ${{ github.event.inputs.template_repo }}
        run: |
          set -euo pipefail
          if [ -z "${GH_REPO_PAT:-}" ]; then
            echo "❌ Secret GH_REPO_PAT не задан"; exit 1
          fi

          # case-insensitive true/false
          case "${PRIVATE,,}" in
            true|1|yes|y) PRIV=true ;;
            *)            PRIV=false ;;
          esac

          RESP=$(curl -sS -X POST \
            -H "Authorization: Bearer ${GH_REPO_PAT}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${TEMPLATE_OWNER}/${TEMPLATE_REPO}/generate" \
            -d "$(jq -n \
                  --arg owner "$TARGET_OWNER" \
                  --arg name "$REPO_NAME" \
                  --arg desc "$DESCRIPTION" \
                  --argjson priv $PRIV \
                  '{owner:$owner,name:$name,description:$desc,private:$priv}')" )

          echo "$RESP" | jq . > /tmp/create.json || true

          if jq -e '.html_url' /tmp/create.json >/dev/null 2>&1; then
            HTML_URL=$(jq -r .html_url  /tmp/create.json)
            CLONE_URL=$(jq -r .clone_url /tmp/create.json)
            echo "REPO_HTML_URL=${HTML_URL}"  >> "$GITHUB_OUTPUT"
            echo "REPO_CLONE_URL=${CLONE_URL}" >> "$GITHUB_OUTPUT"
            {
              echo "### Repository created"
              echo "- HTML: ${HTML_URL}"
              echo "- Clone: \`${CLONE_URL}\`"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Create failed:"; cat /tmp/create.json; exit 1
          fi

  bootstrap_secrets:
    name: Bootstrap secrets & variables
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Ensure gh CLI
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y gh jq
          fi
          gh --version
          jq --version

      - name: Configure auth for gh
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
        run: gh auth status || true

      # ---- Секреты: LLM + Notion + Android signing + Play ----
      - name: Set secrets (LLM/Notion/Signing/Play) IF PRESENT
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
          # LLM
          OPEN_ROUTER_API_KEY_SRC: ${{ secrets.OPEN_ROUTER_API_KEY }}
          # Notion
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          # Android signing (optional)
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          # Play (optional)
          PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          set -euo pipefail
          set_secret () { # name, value
            local n="$1"; local v="${2-}"
            if [ -n "$v" ]; then
              # строго без переводов строки
              printf '%s' "$v" | gh secret set "$n" -R "$TARGET_REPO" -b-
              echo "✓ Secret $n set"
            else
              echo "… $n not set in release-ops — skipping"
            fi
          }

          set_secret OPEN_ROUTER_API_KEY "$OPEN_ROUTER_API_KEY_SRC"
          set_secret NOTION_TOKEN "$NOTION_TOKEN"
          set_secret KEYSTORE_BASE64 "$KEYSTORE_BASE64"
          set_secret KEYSTORE_PASSWORD "$KEYSTORE_PASSWORD"
          set_secret KEY_ALIAS "$KEY_ALIAS"
          set_secret KEY_PASSWORD "$KEY_PASSWORD"
          set_secret PLAY_SERVICE_ACCOUNT_JSON "$PLAY_SERVICE_ACCOUNT_JSON"

      # ---- Переменные: Notion DB + LLM_MODEL (+ опц. LLM_FALLBACKS) ----
      - name: Set variables (LLM_MODEL + LLM_FALLBACKS + NOTION_DB_RELEASES)
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
          NOTION_DB_RELEASES: ${{ vars.NOTION_DB_RELEASES }}
          LLM_MODEL_FROM_RELEASE_OPS: ${{ vars.LLM_MODEL }}
          LLM_FALLBACKS_FROM_RELEASE_OPS: ${{ vars.LLM_FALLBACKS }}
        run: |
          set -euo pipefail

          if [ -n "${NOTION_DB_RELEASES:-}" ]; then
            gh variable set NOTION_DB_RELEASES -R "$TARGET_REPO" --body "$NOTION_DB_RELEASES"
            echo "✓ Variable NOTION_DB_RELEASES set"
          else
            echo "… Variable NOTION_DB_RELEASES not set in release-ops — skipping"
          fi

          LLM_VALUE="${LLM_MODEL_FROM_RELEASE_OPS:-deepseek/deepseek-chat-v3-0324:free}"
          gh variable set LLM_MODEL -R "$TARGET_REPO" --body "$LLM_VALUE"
          echo "✓ Variable LLM_MODEL set to '$LLM_VALUE'"

          LLM_FB_VALUE="${LLM_FALLBACKS_FROM_RELEASE_OPS:-deepseek/deepseek-r1:free}"
          gh variable set LLM_FALLBACKS -R "$TARGET_REPO" --body "$LLM_FB_VALUE"
          echo "✓ Variable LLM_FALLBACKS set to '$LLM_FB_VALUE'"

      # ---- Дым-тест секрета OpenRouter в новом репозитории ----
      - name: Detect default branch of target repo
        id: defbranch
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
        run: |
          set -euo pipefail
          BRANCH=$(gh api repos/$TARGET_REPO --jq .default_branch)
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "Default branch: $BRANCH" >> "$GITHUB_STEP_SUMMARY"

      - name: Wait for workflow indexing (openrouter-smoke.yml)
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
        run: |
          set -euo pipefail
          for i in $(seq 1 30); do
            if gh api repos/$TARGET_REPO/actions/workflows --jq '.workflows[].path' | grep -q '.github/workflows/openrouter-smoke.yml'; then
              echo "Workflow openrouter-smoke.yml is available"; exit 0
            fi
            sleep 2
          done
          echo "⚠️ Workflow openrouter-smoke.yml not found yet"; exit 1

      - name: Trigger OpenRouter smoke test in target repo
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
          DEFAULT_BRANCH: ${{ steps.defbranch.outputs.branch }}
        run: |
          set -euo pipefail
          gh api -X POST \
            repos/$TARGET_REPO/actions/workflows/openrouter-smoke.yml/dispatches \
            -f ref="$DEFAULT_BRANCH"
          echo "Smoke dispatched on $DEFAULT_BRANCH"

      - name: Wait for smoke run result (up to 2 min)
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_PAT }}
          TARGET_REPO: ${{ needs.publish.outputs.repo_fullname }}
        run: |
          set -euo pipefail
          for i in $(seq 1 24); do
            sleep 5
            RUN=$(gh api repos/$TARGET_REPO/actions/workflows/openrouter-smoke.yml/runs --jq '.workflow_runs[0]')
            STATUS=$(jq -r '.status // empty' <<<"$RUN")
            CONCL=$(jq -r '.conclusion // empty' <<<"$RUN")
            URL=$(jq -r '.html_url // empty' <<<"$RUN")
            echo "  status=$STATUS conclusion=$CONCL $URL"
            if [ "$STATUS" = "completed" ]; then
              if [ "$CONCL" = "success" ]; then
                echo "✓ Smoke test passed: $URL"
                exit 0
              else
                echo "❌ Smoke test failed: $URL"
                exit 1
              fi
            fi
          done
          echo "⚠️ Smoke test did not finish in time"; exit 1

      - name: Summary
        run: |
          {
            echo "### Bootstrapped to ${{ needs.publish.outputs.repo_fullname }}"
            echo "- Repo: ${{ needs.publish.outputs.repo_html_url }}"
            echo "- Secrets set from release-ops:"
            echo "  - OPEN_ROUTER_API_KEY: $([ -n "${{ secrets.OPEN_ROUTER_API_KEY }}" ] && echo "✅" || echo "⛔")"
            echo "  - NOTION_TOKEN:       $([ -n "${{ secrets.NOTION_TOKEN }}" ] && echo "✅" || echo "⛔")"
            echo "  - KEYSTORE_*:         $([ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && echo "✅" || echo "⛔")"
            echo "  - PLAY JSON:          $([ -n "${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}" ] && echo "✅" || echo "⛔")"
            echo "- Variables applied to target:"
            echo "  - NOTION_DB_RELEASES: $([ -n "${{ vars.NOTION_DB_RELEASES }}" ] && echo "✅" || echo "⛔")"
            echo "  - LLM_MODEL:          '${{ vars.LLM_MODEL || 'deepseek/deepseek-chat-v3-0324:free' }}'"
            echo "  - LLM_FALLBACKS:      '${{ vars.LLM_FALLBACKS || 'deepseek/deepseek-r1:free' }}'"
          } >> "$GITHUB_STEP_SUMMARY"